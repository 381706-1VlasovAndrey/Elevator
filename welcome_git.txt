* все файлы пишутся с расширением
* если в названии есть пробел, то название вводится в ДВОЙНЫХ ковычках

ОСНОВНЫЕ КОММАНДЫ ДЛЯ РАБОТЫ С КОНСОЛЬЮ 
клавиша tab позволяет автоматом добавлять имя папки\репозитория
// в обратную сторону через shift + tab

cd адрес_папки_куда_нужно_перейти
cd ./имя_папки_внутри_данной_папки

call имя_вызываемого_приложения/файла

touch имя_файла // создать файл

cat имя_файла // вывести данные в файле

cls // очистка экрана в кмд
cmd // вызов нового окна кмд

comp файл_1 файл_2 // сравнение содержимого файла

md имя_создаваемой_директории
mkdir имя_создаваемой_директории

echo файл // вывод текста на экран консоли


ОСНОВНЫЕ КОММАНДРЫ ДЛЯ РАБОТЫ С ГИТ

git config ­­global user.name "Oleg Yasnev"
git config ­­global user.email oyasnev@gmail.com

git clone ссылка_нттр
git clone ссылка_нттр -b имя_нужной_ветки
git clone ссылка_нттр -b имя_нужной_ветки имя_папки_в_которой_будет_проект

git branch // показывает все ветки, что есть. актив под звездочкой
git branch имя_новосоздаваемой_ветки
git branch -d имя_ветки_которую_нужно_удалить

git checkout имя_ветки_куда_нужно_перейти
git checkout идентиф_коммита имя_файла // вернет файл в состояние коммита, которого указали

git merge имя_ветки_которую_соеденим_с_той_в_которой_мы_сейчас_находимся

git status // какие файлы в каком состоянии находятся
// “Changes not staged for commit” — это означает, что отслеживаемый файл был изменён в рабочем каталоге, но пока не проиндексирован. 

git add имя_файа_что_добавляем_к_отслеживанию
git add *.c // добавит все файлы с расширением .с
git add . // добавление всех файлов, которые были добавлены/исправлены

git commit -m "комментарий"

git push origin имя_ветки_куда_отправить

git pull origin имя_ветки_с_которой_нужно_скачать_изменения

git log // покажет все изменения с идентификаторами коммитов
git chow первые_5-6_символов_идентификатора_нужного_коммита // покажет изменения коммита
git diff // разница между нынешним коммитом и предыдущем
git diff первые_несколько_символов_идентификатора_первого_коммита символы_второго // сравнит изменения первого и второго коммита


cat .gitignore // добавляем файл для игнора
// *.расширение это маска

git reset --soft HEAD^ // отмена последнего коммита